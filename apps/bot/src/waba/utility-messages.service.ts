import { Injectable, Logger } from '@nestjs/common';
import type { Language } from '@teddy/shared';
import { I18nService } from './i18n.service';
import { InteractiveButton, MessageTemplate } from './conversation.types';

@Injectable()
export class UtilityMessagesService {
  private readonly logger = new Logger(UtilityMessagesService.name);

  constructor(private i18n: I18nService) {}

  // Welcome —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async createWelcomeMessage(clientCode: string, language: Language): Promise<MessageTemplate> {
    const welcomeText = this.i18n.t('onboarding.welcome', language);
    const customerNumberText = this.i18n.t('onboarding.customer_number', language, { clientCode });
    const menuHintText = this.i18n.t('onboarding.menu_hint', language);

    return {
      type: 'text',
      text: `${welcomeText}\n\n${customerNumberText}\n\n${menuHintText}`
    };
  }

  // Welcome back —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async createWelcomeBackMessage(clientCode: string, language: Language): Promise<MessageTemplate> {
    const greeting = this.i18n.t('greeting', language);
    const customerNumber = this.i18n.t('onboarding.customer_number', language, { clientCode });

    return {
      type: 'text',
      text: `${greeting}\n\n${customerNumber}`
    };
  }

  // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
  async createMainMenuMessage(language: Language): Promise<MessageTemplate> {
    const buttons: InteractiveButton[] = [
      {
        id: 'loyalty',
        title: this.i18n.t('menu.loyalty', language)
      },
      {
        id: 'menu',
        title: this.i18n.t('menu.cafe', language)
      },
      {
        id: 'hours',
        title: this.i18n.t('menu.hours', language)
      }
    ];

    return {
      type: 'interactive',
      buttons,
      text: language === 'PT' ? 'O que gostaria de fazer?' : 'What would you like to do?'
    };
  }

  // –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏
  async createLoyaltyProgressMessage(
    current: number, 
    target: number, 
    language: Language,
    cardImageUrl?: string
  ): Promise<MessageTemplate> {
    const progressText = this.i18n.t('loyalty.progress', language, {
      current: current.toString(),
      target: target.toString()
    });

    if (cardImageUrl) {
      return {
        type: 'image',
        imageUrl: cardImageUrl,
        caption: progressText
      };
    }

    return {
      type: 'text',
      text: progressText
    };
  }

  // –°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–¥–∞–Ω–Ω–æ–º –≤–∞—É—á–µ—Ä–µ
  async createVoucherIssuedMessage(
    voucherCode: string,
    language: Language,
    voucherImageUrl?: string
  ): Promise<MessageTemplate> {
    const completedText = this.i18n.t('loyalty.completed', language);
    const voucherReadyText = this.i18n.t('loyalty.voucher_ready', language);

    const message = `${completedText}\n\n${voucherReadyText}`;

    if (voucherImageUrl) {
      return {
        type: 'image',
        imageUrl: voucherImageUrl,
        caption: `${message}\n\nüé´ ${voucherCode}`
      };
    }

    return {
      type: 'text',
      text: `${message}\n\nüé´ ${voucherCode}`
    };
  }

  // Check-out —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å—Å—ã–ª–∫–∞–º–∏
  async createCheckoutMessage(language: Language): Promise<MessageTemplate> {
    const brandConfig = this.i18n.getBrandConfig();
    
    const checkoutText = this.i18n.t('checkout.message', language, {
      gmapsUrl: brandConfig.gmaps,
      instagramUrl: brandConfig.instagram
    });

    return {
      type: 'text',
      text: checkoutText
    };
  }

  // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
  async createSubscriptionPrompt(language: Language): Promise<MessageTemplate> {
    const promptText = this.i18n.t('subscribe.prompt', language);
    
    const buttons: InteractiveButton[] = [
      {
        id: 'subscribe_yes',
        title: this.i18n.t('subscribe.ok', language)
      },
      {
        id: 'subscribe_no', 
        title: this.i18n.t('subscribe.no', language)
      }
    ];

    return {
      type: 'interactive',
      text: promptText,
      buttons
    };
  }

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø–∏—Å–∫–∏
  async createUnsubscribeConfirmation(language: Language): Promise<MessageTemplate> {
    const unsubscribeText = this.i18n.t('unsubscribe.done', language);

    return {
      type: 'text',
      text: unsubscribeText
    };
  }

  // –°–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é –∫–∞—Ñ–µ
  async createMenuMessage(language: Language): Promise<MessageTemplate> {
    // TODO: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å MenuService –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
    const menuText = language === 'PT' 
      ? '‚òï Nosso delicioso menu estar√° dispon√≠vel em breve!'
      : '‚òï Our delicious menu will be available soon!';

    return {
      type: 'text',
      text: menuText
    };
  }

  // –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã
  async createHoursMessage(language: Language): Promise<MessageTemplate> {
    const hoursText = language === 'PT'
      ? 'üïê Hor√°rios de Funcionamento:\nSegunda-Domingo: 9:00-18:00\n\nüìç Venha nos visitar!'
      : 'üïê Opening Hours:\nMonday-Sunday: 9:00-18:00\n\nüìç Come visit us!';

    return {
      type: 'text',
      text: hoursText
    };
  }

  // –°–æ–±—ã—Ç–∏—è
  async createEventsMessage(language: Language): Promise<MessageTemplate> {
    const eventsText = language === 'PT'
      ? 'üéâ Eventos Especiais:\n\nEm breve teremos workshops incr√≠veis para as crian√ßas!\n\nüìÖ Fique atento √†s novidades!'
      : 'üéâ Special Events:\n\nSoon we\'ll have amazing workshops for kids!\n\nüìÖ Stay tuned for updates!';

    return {
      type: 'text',
      text: eventsText
    };
  }

  // –ü—Ä–∞–≤–∏–ª–∞
  async createRulesMessage(language: Language): Promise<MessageTemplate> {
    const rulesText = language === 'PT'
      ? 'üìã Regras do Parque:\n\n‚Ä¢ Supervis√£o dos pais obrigat√≥ria\n‚Ä¢ M√°ximo 2 horas por sess√£o\n‚Ä¢ Meias obrigat√≥rias\n‚Ä¢ Idade recomendada: 1-12 anos\n‚Ä¢ Mantenha a √°rea limpa\n\nü§ù Obrigado pela compreens√£o!'
      : 'üìã Playground Rules:\n\n‚Ä¢ Parental supervision required\n‚Ä¢ Maximum 2 hours per session\n‚Ä¢ Socks required\n‚Ä¢ Recommended age: 1-12 years\n‚Ä¢ Keep the area clean\n\nü§ù Thank you for understanding!';

    return {
      type: 'text',
      text: rulesText
    };
  }

  // –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async createProfileMessage(clientCode: string, language: Language): Promise<MessageTemplate> {
    // TODO: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å FamiliesService –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
    const profileText = language === 'PT'
      ? `üë§ Seu Perfil:\n\nüÜî C√≥digo do Cliente: ${clientCode}\n\nüìä Dados completos do perfil em breve!`
      : `üë§ Your Profile:\n\nüÜî Customer Code: ${clientCode}\n\nüìä Complete profile data coming soon!`;

    return {
      type: 'text',
      text: profileText
    };
  }

  // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
  async createErrorMessage(language: Language): Promise<MessageTemplate> {
    const errorText = language === 'PT'
      ? '‚ùå Ops! Algo deu errado. Tente novamente em alguns minutos ou contacte nossa equipe.'
      : '‚ùå Oops! Something went wrong. Please try again in a few minutes or contact our staff.';

    return {
      type: 'text',
      text: errorText
    };
  }

  // –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ
  async createUnknownCommandMessage(language: Language): Promise<MessageTemplate> {
    const unknownText = language === 'PT'
      ? 'ü§î N√£o entendi sua mensagem. Vou mostrar o menu principal:'
      : 'ü§î I didn\'t understand your message. Let me show you the main menu:';

    return {
      type: 'text',
      text: unknownText
    };
  }
}
